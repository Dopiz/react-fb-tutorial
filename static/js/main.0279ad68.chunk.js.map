{"version":3,"sources":["index.js"],"names":["ToggleButton","props","className","onClick","Square","buttonBackground","isWinner","style","value","Board","i","key","this","squares","winnerSquares","includes","map","col","renderSquare","step","columns","rows","React","Component","Game","state","history","Array","fill","row","flag","xIsNext","stepNumber","ascendingOrder","slice","length","calculateWinner","setState","concat","parseInt","current","winner","moves","move","info","desc","textStyle","jumpTo","reverse","status","line","handleClick","toggleOrder","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0279ad68.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\nfunction ToggleButton(props) {\n  return (\n    <button className=\"toggle-button\" onClick={() => props.onClick()}>Reverse Order</button>\n  )\n}\n\nfunction Square(props) {\n  const buttonBackground = {\n    'backgroundColor': props.isWinner ? '#DF1614' : ''\n  };\n  return (\n    <button\n      style={buttonBackground}\n      className=\"square\"\n      onClick={props.onClick} >\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square\n        key={i}\n        value={this.props.squares[i]}\n        isWinner={this.props.winnerSquares.includes(i) ? true : false}\n        onClick={() => this.props.onClick(i)}\n      />);\n  }\n\n  columns(i) {\n    return (\n      [0, 1, 2].map((col) => {\n        return (\n          this.renderSquare(i + (col * 3))\n        );\n      })\n    );\n  }\n\n  rows() {\n    return (\n      [0, 1, 2].map((step) => {\n        return (\n          <div key={step} className=\"board-row\">\n            {this.columns(step)}\n          </div>\n        );\n      })\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        {this.rows()}\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n        row: 0,\n        col: 0,\n        flag: 'X',\n      }],\n      xIsNext: true,\n      stepNumber: 0,\n      ascendingOrder: true,\n    }\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        row: parseInt(i / 3) + 1,\n        col: i % 3 + 1,\n        flag: squares[i],\n      }]),\n      xIsNext: !this.state.xIsNext,\n      stepNumber: history.length,\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      xIsNext: (step % 2) === 0,\n      stepNumber: step,\n    })\n  }\n\n  toggleOrder() {\n    this.setState({\n      ascendingOrder: !this.state.ascendingOrder\n    })\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares)\n\n    const moves = history.map((step, move) => {\n      const info = history[move];\n      const desc = move ?\n        'Go to move #' + move + '(' + info.row + ', ' + info.col + ', ' + info.flag + ')' : 'Go to game start';\n      const textStyle = {\n        'fontWeight': move === this.state.stepNumber ? 'bold' : ''\n      };\n\n      return (\n        <li key={move}>\n          <button style={textStyle} onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      )\n    })\n\n    if (!this.state.ascendingOrder) {\n      moves.reverse()\n    }\n\n    let status = winner ? 'The winner is ' + winner.flag : this.state.stepNumber === 9 ? 'Draw' : 'Next player: ' + (this.state.xIsNext ? \"X\" : \"O\");\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            winnerSquares={winner ? winner.line : []}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n        <div className=\"other\">\n          <ToggleButton\n            onClick={() => this.toggleOrder()}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[b] === squares[c] && squares[c]) {\n      return {\n        'flag': squares[a],\n        'line': lines[i]\n      }\n    }\n  }\n  return null\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('app')\n);\n\n"],"sourceRoot":""}